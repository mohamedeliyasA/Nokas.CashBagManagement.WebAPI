// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Nokas.CashBagManagement.WebAPI.DBContext;

#nullable disable

namespace Nokas.CashBagManagement.WebAPI.Migrations
{
    [DbContext(typeof(CashBagRegistrationContext))]
    [Migration("20250609225228_CashBagRegistrationInitialMigration")]
    partial class CashBagRegistrationInitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Nokas.CashBagManagement.WebAPI.Entities.CashBagRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CacheDbRegistrationId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerCountry")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CashBagRegistration");
                });

            modelBuilder.Entity("Nokas.CashBagManagement.WebAPI.Entities.CashBagRegistration", b =>
                {
                    b.OwnsOne("Nokas.CashBagManagement.WebAPI.Entities.Registration", "Registrations", b1 =>
                        {
                            b1.Property<int>("CashBagRegistrationId")
                                .HasColumnType("int");

                            b1.Property<string>("ActionFlag")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("BagNumber")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ConfirmFlag")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("CustomerAddress")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("CustomerNumber")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("EasySafeAccount")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ForeignCurrencies")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LocationId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("NightSafeId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ReferenceStatement")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("RegisteredBy")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<decimal>("RegisteredCash")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("RegisteredChecks")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("RegisteredCoins")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("RegisteredForeignCurrency")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<string>("RegisteredUserId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("RegistrationApproval")
                                .HasColumnType("int");

                            b1.Property<DateTime>("RegistrationDate")
                                .HasColumnType("datetime2");

                            b1.Property<string>("RegistrationSubType")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ShopNumber")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<decimal>("TotalAmount")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<DateTime>("TurnoverDate")
                                .HasColumnType("datetime2");

                            b1.HasKey("CashBagRegistrationId");

                            b1.ToTable("CashBagRegistration");

                            b1.WithOwner()
                                .HasForeignKey("CashBagRegistrationId");

                            b1.OwnsOne("Nokas.CashBagManagement.WebAPI.Entities.Contracts", "Contracts", b2 =>
                                {
                                    b2.Property<int>("RegistrationCashBagRegistrationId")
                                        .HasColumnType("int");

                                    b2.Property<bool>("ContainsValuta")
                                        .HasColumnType("bit");

                                    b2.HasKey("RegistrationCashBagRegistrationId");

                                    b2.ToTable("CashBagRegistration");

                                    b2.WithOwner()
                                        .HasForeignKey("RegistrationCashBagRegistrationId");
                                });

                            b1.OwnsOne("Nokas.CashBagManagement.WebAPI.Entities.ExchangeRates", "ExchangeRates", b2 =>
                                {
                                    b2.Property<int>("RegistrationCashBagRegistrationId")
                                        .HasColumnType("int");

                                    b2.Property<string>("ExchangeRate")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("RegistrationCashBagRegistrationId");

                                    b2.ToTable("CashBagRegistration");

                                    b2.WithOwner()
                                        .HasForeignKey("RegistrationCashBagRegistrationId");
                                });

                            b1.OwnsOne("Nokas.CashBagManagement.WebAPI.Entities.Notes", "Notes", b2 =>
                                {
                                    b2.Property<int>("RegistrationCashBagRegistrationId")
                                        .HasColumnType("int");

                                    b2.Property<string>("Seddel100")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Seddel1000")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Seddel200")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Seddel50")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Seddel500")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("RegistrationCashBagRegistrationId");

                                    b2.ToTable("CashBagRegistration");

                                    b2.WithOwner()
                                        .HasForeignKey("RegistrationCashBagRegistrationId");
                                });

                            b1.OwnsMany("Nokas.CashBagManagement.WebAPI.Entities.Vouchers", "Vouchers", b2 =>
                                {
                                    b2.Property<int>("RegistrationCashBagRegistrationId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b2.Property<int>("Id"));

                                    b2.Property<string>("VoucherDetails")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("RegistrationCashBagRegistrationId", "Id");

                                    b2.ToTable("Vouchers");

                                    b2.WithOwner()
                                        .HasForeignKey("RegistrationCashBagRegistrationId");
                                });

                            b1.Navigation("Contracts")
                                .IsRequired();

                            b1.Navigation("ExchangeRates")
                                .IsRequired();

                            b1.Navigation("Notes")
                                .IsRequired();

                            b1.Navigation("Vouchers");
                        });

                    b.Navigation("Registrations")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
